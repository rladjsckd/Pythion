################################################
dir = input("방향을 입력하세요 (동/서/남/북): ")
if dir == '동':
    print('독도')
elif dir == '서':
    print('강화도')
elif dir == '남':
    print('부산')
elif dir == '북':
    print('서울')
else:
    print('방향을 다시 입력하세요')
##################################################
num = int(input("정수를 입력하세요: "))
if num % 5 == 0:
    print(f"{num}은(는) 5의 배수입니다.")
else:
    print(f"{num}은(는) 5의 배수가 아닙니다.")
##################################################
seoul_milk_price = 2500 
seoul_milk_volume = 1    
daily_milk_price = 4200  
daily_milk_volume = 1.8  
seoul_milk_per_liter = seoul_milk_price / seoul_milk_volume
daily_milk_per_liter = daily_milk_price / daily_milk_volume
if seoul_milk_per_liter < daily_milk_per_liter:
    print("서울 우유가 더 저렴합니다.")
elif seoul_milk_per_liter > daily_milk_per_liter:
    print("매일 우유가 더 저렴합니다.")
else:
    print("서울 우유와 매일 우유의 가격이 같습니다.")

#####################################
# # 반복문
# # 로직을 반복하여 수행한다.
# # FOR
# # 타 프로그래밍 언어의 foreach와 구동원리가 똑같음
#####################################
# # 1씩 증가하는 수를 표현할때
# print(1)
# print(2)
# print(3)
# print(4)
# ...
# print(100)

# # print() 함수를 반복적으로 호출하는 로직을 반복문을 통하여 줄일수 있다.
# # 파이썬 For 문의 range() : 정수 숫자의 범위를 지정해 주는 기능.
# # range(1, 101) : 1 ~ 100    1이상 100미만
# # range(101) : 0~100
# for num in range(1, 101) : 
#     print(num, ',', end=' ')
# print('\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')
# for num in range(101) :
#     print(num, ',', end=' ')

# # 리스드 (컬렉션 : 특정 데이터들을 열거하여 관리하는 데이터 유형)
# lists = [1, 2, 7, 5, 6]
# for i in lists :
#     print(i)

# print('\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')

# for i in [1, 2, 3, 4, 5] :
#     print(i)

##################################################
# for num in range(1, 101) :
#     if num % 2 == 0 :
#         print(num, ',', end=' ')
##################################################
# for num in range(2, 101, 2) :
#     print(num, ',' ,end=' ')
##################################################
# print('\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')
# sum = 0
# for n in range(1, 101) :
#     if n  % 3 == 0:
#         sum += n
# print(sum, ',', end=' ')
###################################################
# sum = 0 # 모든 합을 누적 저장해 둘수 있는 외부 변수
# for n in range(1, 101) :
#     if n % 3 == 0:
#         print(n, "3의 배수입니다.")
#         sum += n
# print(sum)

####################################################
# # 반복문 강제 종료 Break
# # 다음순번 처리 Continue
# # 특정 조건에 따라 반복문을 제어 할 수 있다.
####################################################
# sum = 0 # 정수값을 누적 변수
# for num in range(0, 101) :
#     if 30 < num < 40 :
#         print(num, '은 합산 되지 않고 다음 for의 값을 처리합니다.')
#         continue
#     if num % 3 == 0 :
#         sum += num
#     elif num == 77 :
#         break
# print(sum)


#####################################################
# # 이중루프 (For in For)
# # 메인 For에서 받아온 값을 기준으로 반복적으로 수행하는 로직을 구현 할 수 있다.
#####################################################
# # 구구단 만들기
# # > 단수 (dan) 변수를 2 ~ 9 까지 반복하고
# #   행수 (hang) 변수를 1 ~ 9 까지 반복해서
# #   각 단 수 별로 행 을 반복하여 곱한 값을 표현
# for dan in range(2,10) :
#     print('\n', dan, '단입니다.')
#     for hang in range(1,10) :
#         print(dan, '*' , hang, '=', dan*hang)


# # tringle
# # . 이중 루프를 이용한 * 삼각형 그리기

# y : 피라미드의 행을 변화, 표현하는 변수
# for y in range(1,10) :
#     for x in range(y) :
#         print('*',end="")
#     print()

# # 위 로직은 아래처럼 간단히 구현 할 수 있다.
# for y in range(1,10) :
#     print('*' * y)

###############################################
# # While
# # 특정 조건을 만족 시킬때 로직을 수행한다.
###############################################
# # 증가한 번호가 5이하일 경우만 로직을 실행
# student = 1
# while student <= 20 :
#     print(student, '번 학생입니다.')
#     student += 1 # 반드시 루프를 종료 시킬수 있는 조건의 변화가 필요하다.
#     if 10 < student < 15 :
#         continue
#     elif student == 18 :
#         break 

##################################################
# # 무한루프
# # 특정한 조건 없이는 끝나지 않고 반복하는 루프
##################################################
# # 프로그램이 구동되고 있는 동안 현재 시간을 지속하여 1초 단위로 표현하는 예제
# from datetime import datetime
# import time

# while True :
#     print(datetime.now())
#     time.sleep(1) # 1초

# # 특정 조건을 만족할 경우 무한 루프를 빠져나오는 로직을 구현
# # 종료해야하는 범위가 지정되어있지 않는 프로세스의 종료를 구현하고자 할 때
# print('3 + 7 = ? ')
# while True :
#     result = input("정답은 ?")
#     if(int(result) == 10) : break
# print("Good")
############################################
# sum = 0
# i = 0
# while i<= 100 :
#     i += 1
#     if i % 3 ==0 :
#         sum += i
#         print(i, ',', end=' ')
#     elif i == 100 :
#         break
# print(sum)
##############################################
## 별표 삼각형을 그리는 로직
for i in range(0,10):
    for j in range(9-i):
        print(' ',end='')
    print(i*"*")
    
## 별표 삼각형을 그리는 로직
for i in range(0,10):
    for j in range(9-i):
        print(' ',end='')
    print((i+i+1)*"*")
  
